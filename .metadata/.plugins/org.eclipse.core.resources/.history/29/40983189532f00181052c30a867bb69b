package nl.han.ica.Birdhunter;
import com.sun.prism.image.ViewPort;
import nl.han.ica.OOPDProcessingEngineHAN.Dashboard.Dashboard;
import nl.han.ica.OOPDProcessingEngineHAN.Engine.GameEngine;
import nl.han.ica.OOPDProcessingEngineHAN.Objects.Sprite;
import nl.han.ica.OOPDProcessingEngineHAN.Persistence.FilePersistence;
import nl.han.ica.OOPDProcessingEngineHAN.Persistence.IPersistence;
import nl.han.ica.OOPDProcessingEngineHAN.Sound.Sound;
import nl.han.ica.OOPDProcessingEngineHAN.Tile.TileMap;
import nl.han.ica.OOPDProcessingEngineHAN.Tile.TileType;
import nl.han.ica.OOPDProcessingEngineHAN.View.EdgeFollowingViewport;
import nl.han.ica.OOPDProcessingEngineHAN.View.View;
import nl.han.ica.waterworld.BubbleSpawner;
import nl.han.ica.waterworld.Player;
import nl.han.ica.waterworld.Swordfish;
import nl.han.ica.waterworld.TextObject;
import nl.han.ica.waterworld.tiles.BoardsTile;
import processing.core.PApplet;


import nl.han.ica.OOPDProcessingEngineHAN.Engine.GameEngine;

public class Birdhunter extends GameEngine{

	public static void main(String[] args) {
		
		private Player player;


	}
	
	 public void setupGame() {

	        int worldWidth=1204;
	        int worldHeight=903;
	        initializeSound();
	        initializeTileMap();
	        createObjects();


	        createViewWithoutViewport(worldWidth, worldHeight);
	        //createViewWithViewport(worldWidth, worldHeight, 800, 800, 1.1f);

	    }

	    /**
	     * CreeÃ«rt de view zonder viewport
	     * @param screenWidth Breedte van het scherm
	     * @param screenHeight Hoogte van het scherm
	     */
	    private void createViewWithoutViewport(int screenWidth, int screenHeight) {
	        View view = new View(screenWidth,screenHeight);
	        view.setBackground(loadImage("src/main/java/nl/han/ica/waterworld/media/background.jpg"));

	        setView(view);
	        size(screenWidth, screenHeight);
	    }

	
	    private void createViewWithViewport(int worldWidth,int worldHeight,int screenWidth,int screenHeight,float zoomFactor) {
	        EdgeFollowingViewport viewPort = new EdgeFollowingViewport(player, (int)Math.ceil(screenWidth/zoomFactor),(int)Math.ceil(screenHeight/zoomFactor),0,0);
	        viewPort.setTolerance(50, 50, 50, 50);
	        View view = new View(viewPort, worldWidth,worldHeight);
	        setView(view);
	        size(screenWidth, screenHeight);
	        view.setBackground(loadImage("src/main/java/nl/han/ica/waterworld/media/background.jpg"));
	    }

	    /**
	     * Initialiseert geluid
	     */
	    private void initializeSound() {
	        backgroundSound = new Sound(this, "src/main/java/nl/han/ica/waterworld/media/Waterworld.mp3");
	        backgroundSound.loop(-1);
	        bubblePopSound = new Sound(this, "src/main/java/nl/han/ica/waterworld/media/pop.mp3");
	    }


	    /**
	     * Maakt de spelobjecten aan
	     */
	    private void createObjects() {
	        hunter = new Hunter(this);
	        addGameObject(hunter, 100, 100);

	    }

	 



	    /** 
	     * Initialiseert de tilemap
	     */
	    private void initializeTileMap() {
	        /* TILES */
	        Sprite boardsSprite = new Sprite("src/main/java/nl/han/ica/waterworld/media/boards.jpg");
	        TileType<BoardsTile> boardTileType = new TileType<>(BoardsTile.class, boardsSprite);

	        TileType[] tileTypes = { boardTileType };
	        int tileSize=50;
	        int tilesMap[][]={
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,0,0,0,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1, 0, 0, 0, 0,-1,0 , 0},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	                {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
	        };
	        tileMap = new TileMap(tileSize, tileTypes, tilesMap);
	    }

	    @Override
	    public void update() {
	    }

	}
